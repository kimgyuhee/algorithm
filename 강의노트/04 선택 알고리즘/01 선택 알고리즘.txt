선택 알고리즘

학습목표
평균 선형시간 선택 알고리즘의 원리를 이해한다.
최악의 경우 선형시간 알고리즘의 원리를 이해한다.

-------------------------------------------------------------------------
기본 정렬 : 삽입 정렬 / 선택 정렬 / 버블 정렬
고급 정렬 : 병합 정렬 / 퀵 정렬 / 힙 정렬
특수 정렬 :

-------------------------------------------------------------------------

선택 알고리즘 ## 선택 정렬과 헷갈리지 말아라 !

배열의 숫자 중에서 가장 작은 값을 찾으려면 모든 배열의 값을 확인 후에
위치를 바꿔야 한다. 하지만 좀 더 효과적인 방법은 없을까 ?

	static void swap( int[] a, int i , int j) {
		int temp = a[i];
		a[i]=a[j];
		a[j]=temp;
	}

	static int partition( int[] a, int start , int end ) {
		int value=a[end];
		int i = start - 1;
		for ( int j = start ; j<=end-1 ; ++j ) {
			if (a[j] < value )
				swap(a, ++i, j );
		swap(a, i+1. end);
		return i+1;
	}

	static void quickSort (int[] a, int start, int end ) {
		if ( start >=end ) return ;
		int middle = partition(a,start, end);
		quickSort(a, start, middle-1);
		quickSort(a, miidle, end);
	}

	static int select (int[]a , int nth) {
		quickSort(a,0,a.length-1);
		return a[nth-1];
	}



	 

 ### quick selection 알고리즘
평균 수행시간이 O(N)인 선택 알고리즘
최악의 경우는 O(N*N)

1) 개요

	| 31 | 8 | 65 | 48 | 11 | 3 | 20 | 29 | 73 |

	-> 위 배열에서 i번째 작은 값을 찾아라 
 
quick sort 알고리즘의 partition을 이용하자 !!

2) 규칙 정리

select ( a, start, end, nth )
a 배열의 start 에서 end까지 범위에서, nth 번째 작은 값을 찾기

종료조건
찾을 배열의 크기가 1이면, 그 값을 리턴
	if ( start >=end) return a[start];

현재 단계에서 작업
	배열을 partition 한다.
	int middle = partition(a, start, end );
	
	partition 기준값이 몇번쨰 작은 값인지 계산한다.

	int middle_nth=middle_index+1-start;


3) quick selection 알고리즘 수행 시간
	quick sort와 마찬가지로 평균 선형시간 선택 알고리즘도 재귀적 호출할 때 마다
	배열을 둘로 나눈다. 배열의 크기가 1이 될 때까지 나누려면 logN 번 나누어야 한다.

	정렬 알고리즘들은 배열을 나눈 후, 나뉘어진 배열을 정렬하고 배열 전체를 병합한다.
	-> O(NlogN)이다

	
평균 선행시간 선택 알고리즘
	크기 8 배열 나누기 => 크기 8 배열 비교 작업
	크기 4 배열 나누기 => 크기 4 배열 비교 작업
	크기 2 배열 나누기 => 크기 2 배열 비교 작업
	## 나누기 각 단계의 작업의 크기는 n , n/2, n/4, n/8 ....

	GOOD
	등비수열의 합은 ?......
	##### 평균 선형시간 선택 알고리즘의 수행시간은 O(N)이다. #####

	BAD
 	partition 작업에서 운이 없게도 언제나 최소값을 기준값으로 고른다면,
	나뉘어진 배열의 크기는 1구역의 크기는 0, 2구역의 크기 n-1일 것이다.
	n , n-1 , n-2, n-3, n-4 ....
	등차수열의 합은 ?.......
	##### 평균 선형시간 선택 알고리즘의 최악의 경우 수행시간은 O(N*N) #####



linear selection 알고리즘
	-> 최악의 경우에도 수행 시간이 O(N)인 알고리즘.
	partition의 결과로 나뉘어진 배열의 크기가 <<<등비수열>>>로 줄어들기만 하면 (r<1)
	평균 선형시간 선택 알고리즘의 수행시간은 O(N)이다.
	
	### 최악의 경우에도 등비수열로 줄어들 수 있도록 알고리즘 개선 ###
	
