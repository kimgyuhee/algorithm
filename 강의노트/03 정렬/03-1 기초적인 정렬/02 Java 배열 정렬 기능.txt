Java 배열 정렬 기능

# 힉습목표 #
- Java 표준 라이브러리의 배열 정렬 기능을 학습한다.

1. Arrays 클래스의 sort 메소드

1) 기본 자료형 배열 정렬
Java의 숫자형 기본 자료형(byte, char, int, long, float, double)의 배열은 Arrays 클래스의 sort 메소드
사용하여 정렬할 수 있다.

Arrays 클래스의 sort 메소드
public static void sort(byte[] a); 
public static void sort(char[] a); 
public static void sort(int[] a); 
public static void sort(long[] a); 
public static void sort(float[] a); 
public static void sort(double[] a); 

int[] 정렬

import java.util.Arrays;
public class Example1 {
	public static void main(String[] args)	{
		int[] a = {17, 14, 11, 19, 13, 15, 20, 12, 16, 18 };
		Arrays.sort(a);
}


2) 일부분만 정렬
Arrays 클래스의 sort 메소드

public static void sort(byte[] a, int fromIndex, int toIndex); 
public static void sort(char[] a, int fromIndex, int toIndex); 
public static void sort(int[] a, int fromIndex, int toIndex); 
public static void sort(long[] a, int fromIndex, int toIndex); 
public static void sort(float[] a, int fromIndex, int toIndex); 
public static void sort(double[] a, int fromIndex, int toIndex); 

	=> (fromIndex <= 인덱스 < toIndex )

3) 객체 배열 정렬




2. Comparable 인터페이스

1) Comparable 인터페이스
Comparable 인터페이스를 구현한 클래스 객체의 배열은
Arrays 클래스의 sort 메소드를 사용하여 정렬할 수 있다.

public static void sort(Comparable[] a);

	Comparable 인터페이스
	Interface Comparable<T> {
		int compareTo(T obj)	
	}

Comparable 인터페이스는 compareTo 메소드를 포함한다.
compareTo 메소드는, this 객체와 파라미처 객체를 비교하여, this 객체가 크면 양의 정수를
리턴하고, this 객체가 크면 음의 정수를 리턴하고, 두 객체의 값이 동이하면 0을 리턴한다.

Comparaeble 인터페이스를 구현한 클래스
	1. String
	2. Date
	3. Byte
	4. Character
	5. Integer
	6. Long
	7. Float
	8. Double

2) 기본 자료형 배열과 객체 배열

3) Person 클래스 배열 정렬

Person 클래스가 Comparable 인터페이스를 구현하면,
Arrays.sort 메소드를 사용하여 Person 객체 배열을 정렬할 수 있다.

public class Person implements Comparable<Person> {
	String name;
	int age;

	public Person(Stinrg name, int age ) {
		this.name=name;
		this.age = age;
	}

	public Stirng getName( ) {
		reuturn name; 
	}

	public int getAge( ) {
		return age;
	}

	@Override
	public boolean equals(Object obj) {
		if( ( obj instanceof Person ) ==false ) return false;
		Person p = (Person)obj;
		return (this.name == null ? p.name == null : this.name.equals(p.name)) &&
			this.age == p.age ;
	}

	@Override
	public int compareTo(Person p) {
		int r = this.name.compareTo(p,name);
		if(r!=0) return r;
		return this.age-p.age;
	}
}