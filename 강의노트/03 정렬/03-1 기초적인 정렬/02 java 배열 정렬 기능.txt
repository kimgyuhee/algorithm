Java 배열 정렬 기능

# 힉습목표 #
- Java 표준 라이브러리의 배열 정렬 기능을 학습한다.

1. Arrays 클래스의 sort 메소드

1) 기본 자료형 배열 정렬
Java의 숫자형 기본 자료형(byte, char, int, long, float, double)의 배열은 Arrays 클래스의 sort 메소드
사용하여 정렬할 수 있다.

Arrays 클래스의 sort 메소드
public static void sort(byte[] a); 
public static void sort(char[] a); 
public static void sort(int[] a); 
public static void sort(long[] a); 
public static void sort(float[] a); 
public static void sort(double[] a); 

int[] 정렬

import java.util.Arrays;
public class Example1 {
	public static void main(String[] args)	{
		int[] a = {17, 14, 11, 19, 13, 15, 20, 12, 16, 18 };
		Arrays.sort(a);
}


2) 일부분만 정렬
Arrays 클래스의 sort 메소드

public static void sort(byte[] a, int fromIndex, int toIndex); 
public static void sort(char[] a, int fromIndex, int toIndex); 
public static void sort(int[] a, int fromIndex, int toIndex); 
public static void sort(long[] a, int fromIndex, int toIndex); 
public static void sort(float[] a, int fromIndex, int toIndex); 
public static void sort(double[] a, int fromIndex, int toIndex); 

	=> (fromIndex <= 인덱스 < toIndex )

3) 객체 배열 정렬




2. Comparable 인터페이스

1) Comparable 인터페이스
Comparable 인터페이스를 구현한 클래스 객체의 배열은
Arrays 클래스의 sort 메소드를 사용하여 정렬할 수 있다.

public static void sort(Comparable[] a);

	Comparable 인터페이스
	Interface Comparable<T> {
		int compareTo(T obj)	
	}

Comparable 인터페이스는 compareTo 메소드를 포함한다.
compareTo 메소드는, this 객체와 파라미처 객체를 비교하여, this 객체가 크면 양의 정수를
리턴하고, this 객체가 크면 음의 정수를 리턴하고, 두 객체의 값이 동이하면 0을 리턴한다.

Comparaeble 인터페이스를 구현한 클래스
	1. String
	2. Date
	3. Byte
	4. Character
	5. Integer
	6. Long
	7. Float
	8. Double

2) 기본 자료형 배열과 객체 배열

3) Person 클래스 배열 정렬

Person 클래스가 Comparable 인터페이스를 구현하면,
Arrays.sort 메소드를 사용하여 Person 객체 배열을 정렬할 수 있다.

public class Person implements Comparable<Person> {
	String name;
	int age;

	public Person(Stinrg name, int age ) {
		this.name=name;
		this.age = age;
	}

	public Stirng getName( ) {
		reuturn name; 
	}

	public int getAge( ) {
		return age;
	}

	@Override
	public boolean equals(Object obj) {
		if( ( obj instanceof Person ) ==false ) return false;
		Person p = (Person)obj;
		return (this.name == null ? p.name == null : this.name.equals(p.name)) &&
			this.age == p.age ;
	}

	@Override
	public int compareTo(Person p) {
		int r = this.name.compareTo(p,name);
		if(r!=0) return r;
		return this.age-p.age;
	}
}



****************************************************************



3. Comparator 인터페이스

1) 순서 기준이 몇 개인가 ?
정수의 경우 어느 수가 앞이고, 어느 수가 뒤인지 정해져 있따
날짜의 경우에도 어느 날짜가 앞이고 어느 날짜가 뒤인지 정해져 있다
	-> 요일, 월, 가나다, abs 순서도 정해져 있다.

그런데 사람의 순서는 여러가지 기준이 있을 수 있다.
	이름 순서, 나이 순서, 키 순서, 재산 순서 등등

순서 기준이 한 개인 경우
	- 순서 기준이 한개인 경우에는, 그 순서를 비교하는 메소드를 그 객체에 구현하는 것이 좋다.
	즉, Integer 클래스, Date 클래스는 Comparable 인터페이스를 구현하여
	그 클래스에 CompareTo 메소드를 구현한다.

순서 기준이 여러개인 경우
	- 순서 기준이 여러 개인 경우, 그 각각의 비교방법을 별도의 클래스에 구현하는 것이 좋다.
	즉, Person 클래스에 비교 방법을 구현하는 것보다,
	PersonNameComparator, PersonAgeComparator 등 비교 클래스를
	따로 구현하는 것이 좋다.
	-> 이 비교 클래스는 Comparator 인터페이스를 구현하여 compare 메소드를 구현해야한다.


2) Comparator 인터페이스
interface Comparator<T> {
	int compare (T obj, T obj);
}

Comparator 인터페이스는 compare 메소드를 포함한다.
compare 메소드는, obj1 객체와 obj2 객체를 비교하여, obj1 객체가 크면 양의 정수를 리턴
obj1 객체가 작으면 음의 정수를 리턴하고, 두 값이 동일하면 0을 리턴한다.


3) Person 클래스 배열 정렬
Person.java

Public class Person {
	String name;
	int age;

	public Person(){} // 생성자
	
	//getter 만들기
	
	@Override
	public boolean equals(Object obj) {
		if ((obj instanceof Person) == false) return false;
		Person p = (Person)obj;
		return (this.name == null ? p.name == null : this.name.equals(p.name)) 
		&& this.age == p.age; 
	}

	@Override
	public String toString() {
		return String.format("Person{name=\"%s\", age=%d}", name, age);
	}
}

PersonNameComparator.java

public class PersonNameComparator implements Comparator<Person> {
	@Overide
	public int compare(Person p1, Person p2) {
		int r = p1.name.compareTo(p2.name);  // 먼저 이름(name)을 비교한다.
		if (r != 0) return r; // 이름이 같지 않다면, 이름 비교 결과를 리턴한다.
		return p1.age - p2.age; // 이름이 같다면, 나이(age) 비교 결과를 리턴한다.
	}
} 



