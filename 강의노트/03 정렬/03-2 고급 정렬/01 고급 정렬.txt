고급 정렬

------------------------------------------
학습 목표
병합 정렬 알고리즘을 학습한다.
퀵 정렬 알고리즘을 학습한다.
힙 정렬 알고리즘을 학습한다.
------------------------------------------

1. 병합 정렬 [ MERGESORT ]

1) 실행과정 설명

merge sort 알고리즘

mergeSort(A[ ] , start, end )
{
	if ( start < end ) then {		// 정렬할 부분의 크기가 1 이하이면, 그냥 리턴
		middle <- (start+end)/2	// (1) start, end의 중간 지점 계산
		mergeSort(A, start, middle);	// (2) 중간 지점을 기준으로 앞부분 정렬
		mergeSort(A,middle+1,end);	// (3) 중간 지점을 기준으로 뒷부분 정렬
		merge(A,start, middle, end);	// (4) 병합
}


	EX) int [] A = {7, 1, 3, 2, 9, 4, 5};
	배열의 크기가 7인 배열을 병합 정렬으로 정렬하시오.
	7+0 / 2 = 3 	M (A, 0, 6)
	
	재귀 1	: m=3	M(A,0,3) -> M(A,0,1) -> M(A,0,0) M(A,1,1) [0번쨰 1번째 merge]
		 		   M(A,2,3) -> M(A,2,2) M(A,3,3) [2번째 3번째 merge]

	이렇게 다 쪼개고 다시 낮은 순서대로 병합하여 정렬하는 병합정렬

	# merge 소스코드
	// a 배열에서 앞부분과 뒷부분을 병합한다.
	// 병합할 부분의 길이를 구한다.
	// 병합결과를 저장할 임시 배열을 생성한다.
	// 임시 배열에 대한 인덱스 변수
	// 앞부분에 대한 인덱스 변수
	// 뒷부분에 대한 인덱스 변수
	// 병합할 값이 앞부분과 뒷부분에 둘다 남아 있다면
		// 앞부분과 뒷부분의 선두의 값을 비교하여
		// 더 작은 값이 임시 배열에 먼저들어간다.
	// 앞 부분 배열에 남아있는 값을 임시 배열에 넣는다.
	// 뒷 부분 배열에 남아있는 값을 임시 배열에 넣는다.
	// 임시 배열의 내용을 a 배열의 start 위치에 복사한다.


2) 병합 정렬 수행 시간

	1. 수행 시간
	merge 메소드의 수행시간은 O(N)이다.

	mergeSort 메소드의 배열을 1/2로 나누고, 나뉜 배열 각각에 대해서는
	mergeSort 재귀 호출을 한다.
	따라서 재귀 호출 횟수는 logN 이다.

	따라서 mergeSort 메소드의 수행시간은 O(NlogN) 이다.

	2. 메모리 공간
	merge 메소드는 병합할 배열과 동일한 크기의 임시 배열을 생성한다.
	따라서 입력 배열을 제외하고, mergeSort 메소드가 사용하는 메모리 공간은 O(n)이다.







2. 퀵 정렬 [ QUICKSORT ]

1) 실행과정 설명

		

