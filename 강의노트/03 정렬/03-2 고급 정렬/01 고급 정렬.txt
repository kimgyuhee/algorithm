고급 정렬

------------------------------------------
학습 목표
병합 정렬 알고리즘을 학습한다.
퀵 정렬 알고리즘을 학습한다.
힙 정렬 알고리즘을 학습한다.
------------------------------------------

1. 병합 정렬 [ MERGESORT ]

1) 실행과정 설명

merge sort 알고리즘

mergeSort(A[ ] , start, end )
{
	if ( start < end ) then {		// 정렬할 부분의 크기가 1 이하이면, 그냥 리턴
		middle <- (start+end)/2	// (1) start, end의 중간 지점 계산
		mergeSort(A, start, middle);	// (2) 중간 지점을 기준으로 앞부분 정렬
		mergeSort(A,middle+1,end);	// (3) 중간 지점을 기준으로 뒷부분 정렬
		merge(A,start, middle, end);	// (4) 병합
}


	EX) int [] A = {7, 1, 3, 2, 9, 4, 5};
	배열의 크기가 7인 배열을 병합 정렬으로 정렬하시오.
	7+0 / 2 = 3 	M (A, 0, 6)
	
	재귀 1	: m=3	M(A,0,3) -> M(A,0,1) -> M(A,0,0) M(A,1,1) [0번쨰 1번째 merge]
		 		   M(A,2,3) -> M(A,2,2) M(A,3,3) [2번째 3번째 merge]

	이렇게 다 쪼개고 다시 낮은 순서대로 병합하여 정렬하는 병합정렬

	# merge 소스코드
	// a 배열에서 앞부분과 뒷부분을 병합한다.
	// 병합할 부분의 길이를 구한다.
	// 병합결과를 저장할 임시 배열을 생성한다.
	// 임시 배열에 대한 인덱스 변수
	// 앞부분에 대한 인덱스 변수
	// 뒷부분에 대한 인덱스 변수
	// 병합할 값이 앞부분과 뒷부분에 둘다 남아 있다면
		// 앞부분과 뒷부분의 선두의 값을 비교하여
		// 더 작은 값이 임시 배열에 먼저들어간다.
	// 앞 부분 배열에 남아있는 값을 임시 배열에 넣는다.
	// 뒷 부분 배열에 남아있는 값을 임시 배열에 넣는다.
	// 임시 배열의 내용을 a 배열의 start 위치에 복사한다.


2) 병합 정렬 수행 시간

	1. 수행 시간
	merge 메소드의 수행시간은 O(N)이다.

	mergeSort 메소드의 배열을 1/2로 나누고, 나뉜 배열 각각에 대해서는
	mergeSort 재귀 호출을 한다.
	따라서 재귀 호출 횟수는 logN 이다.

	따라서 mergeSort 메소드의 수행시간은 O(NlogN) 이다.

	2. 메모리 공간
	merge 메소드는 병합할 배열과 동일한 크기의 임시 배열을 생성한다.
	따라서 입력 배열을 제외하고, mergeSort 메소드가 사용하는 메모리 공간은 O(n)이다.







2. 퀵 정렬 [ QUICKSORT ]

1) 실행과정 설명
	배열 나누기 : 임의의 값을 기준으로 기준값보다 작은 값들을 배열의 앞부분으로 이동
			하고, 기준 값보다 큰 값을은 배열의 뒷부분으로 이동하는
			알고리즘을 구현하자.

			운이 좋아서, 중간값을 기준값으로 고르면 앞부분은 빈 배열이고
			뒷 부분이 전체가 될 것이다/

			partition(A[ ]  , p , r)
			{
				x <- A[ r ] ;	// 기준원소(pivot)
				i <- p-1;		// i는 1구역의 끝지점
				for j <- p to r-1	// j는 3구역의 시작지점
					if ( A[j] <= x) then
						A[++i]<->A[j]
						// 값이 증가 후, i위치와 j위치 교환
				A[i+1]<-> A[r]	// 기준 원소와 2구역 첫 원소 교환
				return i+1;	// 기준 원소의 위치 리턴
			}

		용어 설명
		기준값 -> 입력 배열의 끝 값
		1구역 -> 기준값보다 작거나 같은 값들이 위치할 곳
		2구역 -> 기준값보다 큰 값들이 위치할 곳
		3구역 -> 아직 비교하지 않아서 위치가 정해지지 않은 값들

2) 퀵 정렬 구현

	# swap 메소드 생성
	# partition 메소드에서
		// 맨 끝 값을 기준값으로 정하자
		/ i는 1구역의 끝지점
		// j는 3구역의 시작지점
		// a[j] 값이 1 구역에 속하면
			// a[j] 값을 1구역 끝에 추가한다. 1구역 크기 1증가.
		// 기준값인 a[end] 원소와 2구역의 시작 원소를 교환한다.
		// 기준값 위치 리턴

	# quickSort 메소드 생성
		// 배열 나누기
		// 1구역 정렬
		// 2구역 정렬

	
3) 퀵 정렬 수행 시간
	partition 매소드의 수행시간은 O(N)이다.

	평균
	quickSort 메소드의 재귀호출 횟수는, 대략 O(logN) 이다.
	따라서 quickSort 메소드의 수행시간은 O(NlogN) 이다.

	best case : partition 메소드가 배열을 정확히 1/2로 나눈다면, 재귀호출횟수 : logN
	worst case : partition 메소드가 배열을 0 : n-1 크기로 나눈다면,
			재귀호출횟수 : N

	메모리 공간
	quickSort, partition 메소드가 사용하는 메모리 공간은 O(1) 이다.






3. 힙 정렬 [HEAPSORT]
1) 개념
	다음 성질을 만족하는 이진 트리를 힙이라고 부른다.
		- 멘 아래 계층은 자식이 없고,
		- 맨 아래 계층과 그 바로 위 계층을 제외한 노드는 자식이 두개다.
		- 맨 아래 계층은 왼쪽부터 꽉 채워져 있다.
		- 노드의 값은 자식 노드들의 값보다 작다.

	인덱스 k 노드의 왼쪽 자식의 인덱스 = 2k+1
	인덱스 k 노드의 오른쪽 자식 인덱스 = 2k +2
	인덱스 k 노드의 부모의 인덱스 =	k 노드가 왼쪽 자식인 경우 (k-1)/2,
					k 노드가 오른쪽 자식인 경우 (k-2)/2

		
	
2) 힙 정렬 수행 시간

	heapify 함수 수행 시간 
		heapify 함수는 이진 트리에서 자식 노드와 순서를 바꾸는 재귀호출을 한다. 
		힙 이진 트리의 높이는 logN 이다. 
		따라서 heapify 함수의 재귀호출 횟수는 logN  이다. 
		따라서 heapify 함수의 수행 시간은 O(logN) 이다. 


	buildHeap 함수 수행 시간 
		buildHeap 함수에는 N에 비례하는 for 루프가 있다. 
		이 for 루프에서 heapify 함수를 호출한다. 
		따라서 buildHeap 함수의 수행 시간은 O(N logN) 이다. 


	heapSort 함수 수행 시간 
		buildHeap 함수를 1회 호출한다. 
		heapify 함수를 N회 호출한다. 
		따라서 heapSort 함수의 수행 시간은 O(N logN) 이다. 



힙 정렬 알고리즘

	# 힙 정렬 구현 - 최대 힙

	swap( int [] a, int i , int j ) // swap 메소드 구현
	
	static void buildHeap( int[] a ) {
		int end = a.length -1 ;
		for ( int i = end / 2 ; i >=0; --i )
			heapify ( a, i , end );
	}

	static void heapify ( int [] a, int k, int end ) {
		int left = 2*k+1;
		int right = 2*k+2;

		if ( right < = end )
			larger=(a[left]>a[right]) ? left : right ;
		else if ( left <= end) 
			larger = left
		else return;

		if( a[larger] >a[k] ) {
			swap(a,larger,k);
			heapify(a,larger,end);
		}
	}

	static void heapSort( int[] a ) {
		buildHeap(a);
		for(int end = a.length-1 ; end >=1; end-- ) {
			swap( a, 0, end );
			heapify( a, 0, end -1);
		}	
	} 