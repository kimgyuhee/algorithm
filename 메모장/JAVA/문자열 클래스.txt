<<<<< 문자열 클래스 >>>>>

# 학습목표
- String 클래스, StringBuilder 클래스, StringBuffer 클래스


---------------------------------------------------------------------------------------------------

## 내용을 보기 전 내가 아는 지식

- String 클래스는 immutable 객체이므로 값을 변경할 수 없다

- 모든 문자열 클래스는 CharSequence 인터페이스를 부모로 갖고 있다.

- Q. StringBuffer와 StringBuilder 의 차이점
	A. 가장 큰 차이점은 동기화의 유무로써 StringBuffer는 동기화 키워드를 지원하여
	멀티쓰레드 환경에서 안전하다는 점이다. 참고로 String도 불변성을 가지기 때문에
	마찬가지로 멀티쓰레드 환경에서 안정성을 가지고 있습니다.

	반대로 StringBuilder는 동기화를 지원하지 않기 때문에 멀티쓰레드 환경에서 사용하는
	것은 적합하지 않지만동기화를 고려하지않는 만큼 단일쓰레드에서의 성능은
	StringBuilder 보다 뛰어납니다.

	#######################################
	: 운영체제 책 읽고 완벽 이해하기 !
	* 멀티 쓰레드 VS 단일 쓰레드
 		>> 스레드 : CPU(central processing unit [중앙처리장치])의 이용의 기본 단위이다.
		프로세스 내에서 프로그램 명령을 실행하는 기본 단위이자, 흐름, 개체
		
	* 동기화
	#######################################
---------------------------------------------------------------------------------------------------

-> CharSequence inferface : Java 언어에서 문자열에 해당하는 클래스는 여러개다.
	이 문자열 클래스들의 공통 부모 인터페이스이다.

-> StringBuilder 클래스 : 수정 가능한 문자열 객체이다. 

-> StringBuffer 클래스 : StringBuffer 클래스는 StringBuilder 클래스와 기능이 같고 메소드도 같고
	사용법도 같다. 차이점은 StringBuffer 는 thread safe 하지만 StringBuilder는 thread safe
	하지 않다는 점이다.

	* thread safe 하다는 말은 멀티 스레드로 실행되어도 안전하다는 말이다.
	StringBuffer 클래스는 thread safe 하기 때문에, StringBuilder 보다 느리다.
	따라서 thread safe 해야 할 때만 StringBuffer를 사용해야 한다.

	
-> 공통 부모 인터페이스의 목적
	공통 부모 인터페이스를 구현한 클래스들은, 인터페이스에 선언된 메소드듫을 전부
	구현해야 한다. 그 메소드들을 사용법도 서로 같아야 한다.
	사용법이 같아서 호환되는 클래스를 만들기 위해서, 인터페이스 문법을 활용한다.
	
	EX) charAt / length / subSequence / toString

-> 인터페이스 메소드는 , public abstract 키워드를 붙어주지 않아도 기본적으로 전부 public abstract
	메소드이다.

-> 인터페이스를 implements한 클래스에서, 재정의되지 않은 인터페이스의 메소드가 하나라도 있다면
	그 클래스는 abstract 클래스이어야 한다.

-> Q. StringBuilder 클래스에 euqals 메소드가 재정의되지 않은 이유는 ?
	A. 문자열을 조립해서 생성할 때만 잠깐 StringBilder 객체를 사용하라는 의미에서
	equals 메소드가 재정의되지 않았다.


