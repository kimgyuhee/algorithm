자바 StringTokenizer

StringTokenizer는 긴 문자열을 지정된 구분자를 기준으로 문자열 슬라이싱하는데 사용된다.
100, 200, 300, 400의 문자열을, 구분자를 기준으로 슬라이싱하게 되면 4개의 문자열을 획득할 수
있다. StringTonkenizer의 경우 단 한개의 구분자를 사용해야 한다는 단점이 있으므로 복잡한
형태의 구분자로 문자열을 나눠야 할때는 Scanner나 split를 사용해야 한다.

StringTokenizer 생성자 및 메소드는 다음 표와 같다.

	생성자 / 메소드			설명
	StringTokenizer(String,String)	문자열을 지정된 구분자로 나누는 StringTokenizer를
					생성한다.
					-> 구분자는 토큰으로 간주되지 않음
	StringTokenizer(String,String)	구분자도 토큰으로 간주

	int countTokens()			전체 토큰의 수를 반환
	boolean hasMoreTokens()		토큰이 남았는지 알려줌
	String nextToken			다음 토큰을 반환


	소스코드

	public static void main(String[] args) {
		String source = "100,200,300,400";
		StringTokenizer st = new StringTokenizer(source,",");

		while(st.hasMoreTokens())
			System.out.println(st.nextTokens());
	}


Java 입출력, BufferedReader, StringTokenizer

자바의 입력
	- Scanner, BufferedReader, StringTokenizer
	- BudderedReader, StringTokenizer는 문자열로 활용하기 위하여 사용
	- BufferedReader를 사용하는 것이 Scanner를 사용하는 것보다 빠름
	- BufferedReader는 문자열에 최적화 되어 있음

	Scanner vs BufferedReader

	1 2 3 4 5 6 7 8 9 10 11 // 한줄입력
	
	Scanner
		for (int i=0; i<12; i++)
			sc.nextInt();

	BufferedReader

	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	String[] s = br.readLine().spilt(" ");
	

	### StringTokenizer의 사용목적 ###
	- BufferReader는 잘라서 배열과 같이 인덱스를 사용하여 접근하여 사용
	- StringTokenizer는 공백이 있다면 뒤에 문자열이 공백 자리를 땡겨 채우도록한다
	- StringTokenizer가 BufferedReader보다 빠르게 사용될 수 있다.
	- 문자열을 자르기 위해 split를 사용할 때, spilt은 정규식을 기반으로 자르는 로직으로서
	내부는 복잡하다. 그에 비해 StringTokenizer의 nextToken() 메소드는 단순히
	공백 자리를 땡겨 채우는 것이다. 그렇기 때문에 속도 차이가 날 수 밖에 없다
	- 정규식이나 인덱스 접근과 같은 처리가 있다면 StringTokenizer를 사용하는 것이 효울

	
	StringTokenizer

	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	StringTokenizer st = new StinrgTokenizer(br.readLine());

